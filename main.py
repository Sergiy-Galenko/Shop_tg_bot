import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from aiocryptopay import AioCryptoPay, Networks

from config import TOKEN, CRYPTO_TOKEN
import db

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(level=logging.INFO)

# Telegram bot
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# CryptoBot API
crypto = AioCryptoPay(token=CRYPTO_TOKEN, network=Networks.MAIN_NET)

#@dp.message(lambda m: m.sticker is not None)
#async def get_sticker_id(message: types.Message):
#    await message.answer(f"file_id —Ü—å–æ–≥–æ —Å—Ç—ñ–∫–µ—Ä–∞:\n<code>{message.sticker.file_id}</code>", parse_mode='HTML')

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Shop(StatesGroup):
    id = State()
    balance = State()
    payment = State()
    buy_thing = State()

# Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ç—ñ–ª—å–∫–∏ –∑ "–ú–Ü–ô –ö–ê–ë–Ü–ù–ï–¢"
reply_bt = ReplyKeyboardBuilder()
reply_bt.button(text='üñ• –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
reply_bt.adjust(1)
REPLY_BT = reply_bt.as_markup(resize_keyboard=True)

# Inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞–±—ñ–Ω–µ—Ç—É
def get_cabinet_inline():
    kb = InlineKeyboardBuilder()
    kb.button(text='üí∞ –ü–û–ü–û–í–ù–ò–¢–ò –ë–ê–õ–ê–ù–°', callback_data='topup')
    kb.button(text='üéÅ –ü–†–ò–î–ë–ê–¢–ò –õ–£–¢(METRO)', callback_data='buy_loot')
    kb.button(text='üîÑ –ó–º—ñ–Ω–∏—Ç–∏ —ñ–≥—Ä–æ–≤–µ ID', callback_data='change_game_id')
    kb.button(text='üí¨ –¢–µ—Ö –ø—ñ–¥—Ç—Ä–∏–º–∫–∞', callback_data='tech_support')
    kb.button(text='üíµ –ü—Ä–æ–¥–∞—Ç–∏ –ª—É—Ç/–°—Ç–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü–µ–º', callback_data='become_seller')
    kb.adjust(1)
    return kb.as_markup()

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data in ['tech_support', 'become_seller'])
async def not_implemented(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer_sticker("CAACAgIAAxkBAAIE92hX8BEkQ-c4nI4mLhl3ga9PPWQ3AALOYwACmxeASsMeUM67z9rwNgQ")
    await state.clear()
    user_key = str(message.from_user.id)
    user_data = await db.get_user(int(user_key))

    if user_data:
        game_id = user_data['game_id']
        balance = user_data.get('balance', 0)
        await state.update_data(id=game_id)
        await message.answer('–†–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏!\n–í–∞—à–µ —ñ–≥—Ä–æ–≤–µ ID —É–∂–µ —î –≤ –±–∞–∑—ñ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –π–æ–≥–æ –∑–º—ñ–Ω–∏—Ç–∏ /change_id')
        await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}', reply_markup=REPLY_BT)
        await state.set_state(Shop.balance)
    else:
        await message.answer('–ü—Ä–∏–≤—ñ—Ç! –£–≤–µ–¥–∏ —Å–≤–æ—î —ñ–≥—Ä–æ–≤–µ ID:', reply_markup=REPLY_BT)
        await state.set_state(Shop.id)

# –û–±—Ä–æ–±–∫–∞ ID
@dp.message(Command('change_id'))
async def change_id(message: types.Message, state: FSMContext):
    user_key = str(message.from_user.id)
    user_data = await db.get_user(int(user_key))

    if user_data:
        await state.update_data(is_changing_id=True)
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–≥—Ä–æ–≤–µ ID:')
        await state.set_state(Shop.id)
    else:
        await message.answer('–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ /start')

@dp.message(StateFilter(Shop.id))
async def process_id(message: types.Message, state: FSMContext):
    game_id = message.text.strip()
    user_key = str(message.from_user.id)
    user_data = await db.get_user(int(user_key))

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏
    if not game_id.isdigit():
        await message.answer('‚ùå –Ü–≥—Ä–æ–≤–∏–π ID –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')
        await state.set_state(Shop.id)
        return
    if not game_id.startswith('5'):
        await message.answer('‚ùå –Ü–≥—Ä–æ–≤–∏–π ID –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 5. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')
        await state.set_state(Shop.id)
        return
    if len(game_id) < 9 or len(game_id) > 11:
        await message.answer('‚ùå –Ü–≥—Ä–æ–≤–∏–π ID –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 9 –¥–æ 11 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')
        await state.set_state(Shop.id)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–º—ñ–Ω–∞ ID
    state_data = await state.get_data()
    is_changing_id = state_data.get('is_changing_id', False)

    if is_changing_id:
        if user_data:
            await db.update_game_id(int(user_key), game_id)
            await message.answer(f'ID —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {game_id}')
            await state.clear()
            await state.set_state(Shop.balance)
            return

    # –Ø–∫—â–æ —Ü–µ –Ω–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    if not user_data:
        await db.create_user(int(user_key), game_id)

    await state.update_data(id=game_id)
    kb = InlineKeyboardBuilder()
    kb.button(text='CryptoBot', callback_data='button_pressed')
    await message.answer('–£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!')
    await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å: 0', reply_markup=REPLY_BT)
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è', reply_markup=kb.as_markup())
    await state.set_state(Shop.balance)

# –û–±—Ä–æ–±–∫–∞ reply-–∫–Ω–æ–ø–∫–∏ "–ú–Ü–ô –ö–ê–ë–Ü–ù–ï–¢"
@dp.message(StateFilter(Shop.balance))
async def process_balance(message: types.Message, state: FSMContext):
    if message.text == 'üñ• –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
        user_key = str(message.from_user.id)
        user_data = await db.get_user(int(user_key))
        if user_data:
            game_id = user_data['game_id']
            balance = user_data.get('balance', 0)
            payment_history = "\n".join([f"–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {p['amount']} USDT" for p in user_data.get('payments', [])])
            if not payment_history:
                payment_history = "–ü–æ–ø–æ–≤–Ω–µ–Ω—å —â–µ –Ω–µ –±—É–ª–æ"
            
            cabinet_message = await message.answer(
                f"üéÆ –í–∞—à —ñ–≥—Ä–æ–≤–∏–π ID: {game_id}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT",
                reply_markup=get_cabinet_inline()
            )
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            await state.update_data(cabinet_message_id=cabinet_message.message_id)
        else:
            await message.answer('–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ /start')
            await state.clear()

# Callback-–æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
@dp.callback_query(lambda c: c.data == 'topup')
async def handle_topup(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    cabinet_message_id = state_data.get('cabinet_message_id')

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é –Ω–∞–∑–∞–¥
    kb = InlineKeyboardBuilder()
    kb.button(text='‚¨ÖÔ∏è –ù–ê–ó–ê–î', callback_data='back_to_cabinet')
    kb.adjust(1)

    if cabinet_message_id:
        await bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=cabinet_message_id,
            text='–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:',
            reply_markup=kb.as_markup()
        )
    else:
        await callback.message.answer('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:', reply_markup=kb.as_markup())

    await state.set_state(Shop.payment)

# –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ CryptoBot
@dp.callback_query(lambda c: c.data == 'button_pressed')
async def handle_button_pressed(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Å—É–º–º—É üí∏")
    await state.set_state(Shop.payment)

# –û–±—Ä–æ–±–∫–∞ —Å—É–º–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
@dp.message(StateFilter(Shop.payment))
async def process_payment(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        user_key = str(message.from_user.id)
        user_data = await db.get_user(int(user_key))

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É
        invoice = await crypto.create_invoice(asset='USDT', amount=amount)
        invoice_url = invoice.bot_invoice_url
        invoice_id = invoice.invoice_id

        await message.answer(f"–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –æ–ø–ª–∞—Ç–∏: {invoice_url}")
        await message.answer("–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...")

        # –ß–µ–∫–∞—î–º–æ –Ω–∞ –æ–ø–ª–∞—Ç—É (–¥–æ 90 —Å–µ–∫)
        for _ in range(30):
            await asyncio.sleep(3)
            try:
                result = await crypto.get_invoices(invoice_ids=invoice_id)
                if result.status == 'paid':
                    # –î–æ–¥–∞—î–º–æ –ø–ª–∞—Ç—ñ–∂ –ª–∏—à–µ —è–∫—â–æ —Ç–∞–∫–æ–≥–æ invoice_id —â–µ –Ω–µ –±—É–ª–æ
                    if user_data and not any(p.get('invoice_id') == invoice_id for p in user_data['payments']):
                        await db.add_payment(int(user_key), amount, invoice_id)
                        user_data = await db.get_user(int(user_key))

                    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!\n–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {user_data['balance']}", reply_markup=REPLY_BT)
                    payment_history = "\n".join([f"–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {p['amount']} USDT" for p in user_data['payments']])
                    await message.answer(f"–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–ø–æ–≤–Ω–µ–Ω—å:\n{payment_history}", reply_markup=REPLY_BT)

                    await state.set_state(Shop.balance)
                    return
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–ø–ª–∞—Ç–∏: {e}")
                continue

        await message.answer("‚è≥ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –Ø–∫—â–æ –≤–∏ –≤–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ /start")
        await state.set_state(Shop.balance)

    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—á–∏—Å–ª–æ)", reply_markup=REPLY_BT)
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —ñ–Ω–≤–æ–π—Å—É: {str(e)}")

# –ó–∞–∫—Ä–∏—Ç—Ç—è CryptoPay –∫–ª—ñ—î–Ω—Ç–∞
async def on_shutdown():
    await crypto.close()

# Callback-–æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ª—É—Ç—É
@dp.callback_query(lambda c: c.data == 'buy_loot')
async def handle_buy_loot(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–±—ñ–Ω–µ—Ç—É
    state_data = await state.get_data()
    cabinet_message_id = state_data.get('cabinet_message_id')
    
    if cabinet_message_id:
        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–±—ñ–Ω–µ—Ç—É
        kb = InlineKeyboardBuilder()
        kb.button(text='–†–µ—á—ñ 6-–≥–æ —Ä—ñ–≤–Ω—è –≤–∏—â–æ—ó —è–∫–æ—Å—Ç—ñ', callback_data='6_level')
        kb.button(text='–ó–æ–ª–æ—Ç—ñ —Ä–µ—á—ñ', callback_data='gold_stuff')
        kb.button(text='‚¨ÖÔ∏è –ù–ê–ó–ê–î', callback_data='back_to_cabinet')
        kb.adjust(1)
        
        await bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=cabinet_message_id,
            text='–í–∏–±–µ—Ä—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏',
            reply_markup=kb.as_markup()
        )
    else:
        # –Ø–∫—â–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
        kb = InlineKeyboardBuilder()
        kb.button(text='–†–µ—á—ñ 6-–≥–æ —Ä—ñ–≤–Ω—è –≤–∏—â–æ—ó —è–∫–æ—Å—Ç—ñ', callback_data='6_level')
        kb.button(text='–ó–æ–ª–æ—Ç—ñ —Ä–µ—á—ñ', callback_data='gold_stuff')
        kb.button(text='‚¨ÖÔ∏è –ù–ê–ó–ê–î', callback_data='back_to_cabinet')
        kb.adjust(1)
        await callback.message.answer('–í–∏–±–µ—Ä—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏', reply_markup=kb.as_markup())
    
    await state.set_state(Shop.buy_thing)

# Callback-–æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–ê–ó–ê–î"
@dp.callback_query(lambda c: c.data == 'back_to_cabinet')
async def handle_back_to_cabinet(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    cabinet_message_id = state_data.get('cabinet_message_id')

    if cabinet_message_id:
        user_key = str(callback.from_user.id)
        user_data = await db.get_user(int(user_key))
        if user_data:
            game_id = user_data["game_id"]
            balance = user_data.get("balance", 0)
            await bot.edit_message_text(
                chat_id=callback.from_user.id,
                message_id=cabinet_message_id,
                text=f"üéÆ –í–∞—à —ñ–≥—Ä–æ–≤–∏–π ID: {game_id}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT",
                reply_markup=get_cabinet_inline(),
            )
    await state.set_state(Shop.balance)

@dp.callback_query(lambda c: c.data == 'gold_stuff')
async def handle_gold_stuff(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–±—ñ–Ω–µ—Ç—É
    state_data = await state.get_data()
    cabinet_message_id = state_data.get('cabinet_message_id')
    
    if cabinet_message_id:
        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–±—ñ–Ω–µ—Ç—É
        kb = InlineKeyboardBuilder()
        kb.button(text='Mk14 –∑–æ–ª–æ—Ç–∞', callback_data='mk14_gold')
        kb.button(text='JS9 –∑–æ–ª–æ—Ç–∞', callback_data='js9_gold')
        kb.button(text='–ë—Ä–æ–Ω–∏–∂–µ–ª–µ—Ç("–ö–æ–±—Ä–∞",–∑–æ–ª–æ—Ç–∏–π)', callback_data='cobrar_gold')
        kb.button(text='‚¨ÖÔ∏è –ù–ê–ó–ê–î', callback_data='back_to_stuff')
        kb.adjust(1)
        
        await bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=cabinet_message_id,
            text='–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ—á',
            reply_markup=kb.as_markup()
        )
    else:
        # –Ø–∫—â–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
        kb = InlineKeyboardBuilder()
        kb.button(text='Mk14 –∑–æ–ª–æ—Ç–∞', callback_data='mk14_gold')
        kb.button(text='JS9 –∑–æ–ª–æ—Ç–∞', callback_data='js9_gold')
        kb.button(text='–ë—Ä–æ–Ω–∏–∂–µ–ª–µ—Ç("–ö–æ–±—Ä–∞",–∑–æ–ª–æ—Ç–∏–π)', callback_data='cobrar_gold')
        kb.button(text='‚¨ÖÔ∏è –ù–ê–ó–ê–î', callback_data='back_to_stuff')
        kb.adjust(1)
        await callback.message.answer('–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ—á', reply_markup=kb.as_markup())
    
    await state.set_state(Shop.buy_thing)

# Callback-–æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–ê–ó–ê–î"
@dp.callback_query(lambda c: c.data == 'back_to_stuff')
async def handle_back_to_stuff(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–±—ñ–Ω–µ—Ç—É
    state_data = await state.get_data()
    cabinet_message_id = state_data.get('cabinet_message_id')
    
    if cabinet_message_id:
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
        kb = InlineKeyboardBuilder()
        kb.button(text='–†–µ—á—ñ 6-–≥–æ —Ä—ñ–≤–Ω—è –≤–∏—â–æ—ó —è–∫–æ—Å—Ç—ñ', callback_data='6_level')
        kb.button(text='–ó–æ–ª–æ—Ç—ñ —Ä–µ—á—ñ', callback_data='gold_stuff')
        kb.button(text='‚¨ÖÔ∏è –ù–ê–ó–ê–î', callback_data='back_to_cabinet')
        kb.adjust(1)
        
        await bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=cabinet_message_id,
            text='–í–∏–±–µ—Ä—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏',
            reply_markup=kb.as_markup()
        )
    
    await state.set_state(Shop.buy_thing)

@dp.callback_query(lambda c: c.data == '6_level')
async def handle_gold_stuff(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–±—ñ–Ω–µ—Ç—É
    state_data = await state.get_data()
    cabinet_message_id = state_data.get('cabinet_message_id')
    
    if cabinet_message_id:
        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–±—ñ–Ω–µ—Ç—É
        kb = InlineKeyboardBuilder()
        kb.button(text='Mk14 6-–≥–æ —Ä—ñ–≤–Ω—è', callback_data='mk14_6')
        kb.button(text='JS9 6-–≥–æ —Ä—ñ–≤–Ω—è', callback_data='js9_6')
        kb.button(text='–ë—Ä–æ–Ω–∏–∂–µ–ª–µ—Ç("–ö–æ–±—Ä–∞",6-–≥–æ —Ä—ñ–≤–Ω—è)', callback_data='cobrar_6')
        kb.button(text='‚¨ÖÔ∏è –ù–ê–ó–ê–î', callback_data='back_to_stuff')
        kb.adjust(1)
        
        await bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=cabinet_message_id,
            text='–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ—á',
            reply_markup=kb.as_markup()
        )
    else:
        # –Ø–∫—â–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
        kb = InlineKeyboardBuilder()
        kb.button(text='Mk14 –∑–æ–ª–æ—Ç–∞', callback_data='mk14_gold')
        kb.button(text='JS9 –∑–æ–ª–æ—Ç–∞', callback_data='js9_gold')
        kb.button(text='–ë—Ä–æ–Ω–∏–∂–µ–ª–µ—Ç("–ö–æ–±—Ä–∞",–∑–æ–ª–æ—Ç–∏–π)', callback_data='cobrar_gold')
        kb.button(text='‚¨ÖÔ∏è –ù–ê–ó–ê–î', callback_data='back_to_stuff')
        kb.adjust(1)
        await callback.message.answer('–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ—á', reply_markup=kb.as_markup())
    
    await state.set_state(Shop.buy_thing)

@dp.callback_query(lambda c: c.data == 'change_game_id')
async def handle_change_game_id(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    cabinet_message_id = state_data.get('cabinet_message_id')
    user_key = str(callback.from_user.id)
    user_data = await db.get_user(int(user_key))
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é –Ω–∞–∑–∞–¥
    kb = InlineKeyboardBuilder()
    kb.button(text='‚¨ÖÔ∏è –ù–ê–ó–ê–î', callback_data='back_to_cabinet')
    kb.adjust(1)

    if user_data:
        await state.update_data(is_changing_id=True)
        if cabinet_message_id:
            await bot.edit_message_text(
                chat_id=callback.from_user.id,
                message_id=cabinet_message_id,
                text='–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–≥—Ä–æ–≤–µ ID:',
                reply_markup=kb.as_markup()
            )
        else:
            await callback.message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–≥—Ä–æ–≤–µ ID:', reply_markup=kb.as_markup())
        await state.set_state(Shop.id)
    else:
        if cabinet_message_id:
            await bot.edit_message_text(
                chat_id=callback.from_user.id,
                message_id=cabinet_message_id,
                text='–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ /start',
                reply_markup=kb.as_markup()
            )
        else:
            await callback.message.answer('–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ /start', reply_markup=kb.as_markup())

# –ó–∞–∫—Ä–∏—Ç—Ç—è CryptoPay –∫–ª—ñ—î–Ω—Ç–∞
async def on_shutdown():
    await crypto.close()

# –ó–∞–ø—É—Å–∫
async def main():
    await db.init_pool()
    await dp.start_polling(bot, shutdown=on_shutdown)

if __name__ == '__main__':
    asyncio.run(main())

